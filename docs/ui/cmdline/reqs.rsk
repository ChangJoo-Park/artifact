
[REQ-ui-cmdline]
partof = "REQ-purpose-ui-cmdline"
text = '''
The ui::cmdline module **will** accomplish the second half of the primary
purpose of rsk, which is to provide a simple way for a developer
to track and monitor their progress, as well as give them
easy access to all files.
'''

[REQ-ui-cmdline-cmd]
text = '''
The commands on the cmdline **will** be memonic and borrow from other
common command line tools like bash, git, etc whenever possible.

In the cases where copying those tools commands does not make sense,
they will not be coppied
'''

[REQ-ui-cmdline-cmd-help]
text = "help command"

[REQ-ui-cmdline-cmd-init]
text = '''
`rsk init` is the primary first command that will be run by the user. It will
initialize a `.rsk` folder in the cwd (giving an error if the cwd is not part
of a repo) and will give the user basic instructions on how to create
requirements and where to get more information.
'''

[REQ-ui-cmdline-cmd-ls]
text = '''
The `rsk ls` command grouping **will** be used to display information
about the artifacts in various specified formats.

`ls` is the primary window into a user's artifacts, creating a simple
interface to glimpse large amounts of information.

the default outputs of `ls` should try to be easy to parse by tools like
grep as it can be.
'''

[REQ-ui-cmdline-cmd-ls-args]
text = '''
All unflaged args after `ls` shall be determined to be an ArtNames strings.
Each string will be interpreted to match possible ArtNames and those names will
be used for the display.

This should mimick the unix `ls` command as much as possible. Wildcards are not
understood, but rsk standard `REQ-foo-[bar-baz]` will be.
'''

[REQ-ui-cmdline-cmd-ls-flags-empty]
text = '''
`rsk ls` with no commands given will simply print all artifacts with standard
settings in a single line of information.
'''

[REQ-ui-cmdline-cmd-ls-flags-long]
text = '''
the `-l` flag will signify that the "long form" of printing is desired. Typically
this will result in more information being displayed and the information
taking up more than one line.

if `l` is specified without any display flags, then display will == `-A`
'''

[REQ-ui-cmdline-cmd-ls-flags-recursive]
text = '''
the `-r` flag will signify that information should be displayed recursively,
meaning that if REQ-foo has parts REQ-bar and REQ-baz, then the parts will
be displayed as well.

Recursion **shall** track what has been displayed and print `<ArtName> ...`
for anything that has been displayed (and no additional information).

Recursion **shall** be smart indented with clear spearators in `-l` mode
so that it is easy to read
'''

[REQ-ui-cmdline-cmd-ls-flags-display]
text = '''
The following flags are used to specify what to display:
- a/A: display all these flags for all artifacts
- D: display the path to where the artifact is defined
- P: display parts names in reduced form
- O: display partof names in reduced form
- T: display the text formatted as markdown. If `-l` is not specified,
    this will display the first 30 chars of the "debug" representation
    of the text
- R: display the refs
- L: display the loc path (implementation path)
'''

[REQ-ui-cmdline-cmd-ls-flags-pattern]
refs = ["REQ-ui-cmdline-cmd-ls-flags-display"]
text = '''
the `-p` flag will signify that the main argument should be interpreted as
a regexp pattern instead of as artifact names

If a value follows p, it will specify the fields to filter in that map with
REQ-ui-cmdline-cmd-ls-flags-display (with the addition of N==name)

So: `rsk ls -p "REQ-ui-cmdline.*" -NO` would filter by name and partof
'''

[REQ-ui-cmdline-cmd-ls-flags-invalid]
text = '''
the `-i` flag will signify to display only the invalid items, or the items
that have some issue with them (i.e. loc does not exist).

It is recommended that this flag be used with -v to also see associated
warnings
'''

[REQ-ui-cmdline-cmd-ls-flags-tested]
text = '''
The `-t` flag will speciy only **non** tested components (< 100%)
The `-T` flag will specify only **fully** tested components (== 100%)
'''

[REQ-ui-cmdline-cmd-ls-flags-completed]
text = '''
The `-c` flag will speciy only **non** completed components (< 100%)
The `-C` flag will specify only **fully** completed components (== 100%)
'''
