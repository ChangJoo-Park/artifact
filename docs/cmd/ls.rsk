[REQ-ls]
partof = "REQ-cmd"
text = '''
The `rsk ls` command grouping **will** be used to display information
about the artifacts in various specified formats.

`ls` is the primary window into a user's artifacts, creating a simple
interface to glimpse large amounts of information.

the default outputs of `ls` should try to be easy to parse by tools like
grep as it can be.
'''

[REQ-ls-args]
text = '''
`rsk ls` with no commands given will simply print all artifacts with standard
settings in a single line of information.

The args are as follows:
 - SEARCH str: positional argument detailing which artifacts to display
 - display: flags that control what information will be displayed
 - pattern: flag which controls which fields will be searched when
     regex pattern is selected
 - completed/tested: flags which control what percentage completed/tested to
     display
'''

[REQ-ls-display]
partof = "REQ-ls-args"
text = '''
The following flags are used to specify what to display:
- a/A: display all these flags for all artifacts
- D: display the path to where the artifact is defined
- P: display parts names in reduced form
- O: display partof names in reduced form
- T: display the text formatted as markdown. If `-l` is not specified,
this will display the first 30 chars of the "debug" representation
of the text
- R: display the refs
- L: display the loc path (implementation path)
'''

[REQ-ls-pattern]
partof = "REQ-ls-args"
text = '''
the `-p` flag will signify that the SEARCH argument should be interpreted as
a regexp pattern instead of as artifact names

If a value follows p, it will specify the fields to filter in that map with
REQ-ls-display (with the addition of `N` for name)

So: `rsk ls -p "REQ-ui-cmdline.*" -NO` would filter by name and partof
'''

[REQ-ls-color]
text = '''
In order to make viewing of information via cmdline easier,
rsk **shall** colorize it's output to make it clear which items
are done or not done or in error.

The following **will** be followed:
- names that are complete will be green
- names that are almost complete will be blue
- names that are somewhat complete will be yellow
- names that are very litle or not complete will be red
- names that are in ERROR will *blink bold red*
'''
[SPC-ls-color]
text = '''
The formatting function **shall** apply color if it is selected by
the settings.

A fairly complex point **shall** be put in use for colorizing the output.
The goal is to have:
- 100% tested+completed be *green* across the board
- otherwise, no *green*. *Blue* is the best you can get

being completed is weighted higher than being tested -- 100% completed should always
mean that your name is *blue*.

For completed, the levels are: (100%, 70%, 40%, 0%) which correspond to points (3, 2, 1, 0)
and colors (blue, yellow, yellow, red)

For tested, the levels are: (100%, 50%, 0%) which correspond to points (2, 1, 0)
and colors (blue, yellow, red)

Add these together and you get the following:
- 5: Everything green
- 3-4: name is blue
- 1-2: name is yellow
- 0: name is red
'''

[REQ-ls-search]
partof = "REQ-purpose-ui-filtering"
refs = ["REQ-core-artifact-attrs-partof-fmt"]
text = '''
The first (and only) argument after `ls` **shall** be the SEARCH field which
is used to find the artifacts that the user is looking for.

By default, this will be interpreted as an ArtName group. However, if pattern
searching is selected, it will be interpreted as a perl regexp
'''
[TST-ls-search]
text = "validate that the args are interpreted correctly"

[REQ-ui-cmdline-ls-flags-long]
text = '''
the `-l` flag will signify that the "long form" of printing is desired. Typically
this will result in more information being displayed and the information
taking up more than one line.

if `l` is specified without any display flags, then display will == `-A`
'''

[REQ-ui-cmdline-ls-flags-recursive]
text = '''
the `-r` flag will signify that information should be displayed recursively,
meaning that if REQ-foo has parts REQ-bar and REQ-baz, then the parts will
be displayed as well.

Recursion **shall** track what has been displayed and print `<ArtName> ...`
for anything that has been displayed (and no additional information).

Recursion **shall** be smart indented with clear spearators in `-l` mode
so that it is easy to read
'''
