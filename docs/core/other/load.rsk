[SPC-core-load-scope]
partof = "REQ-purpose-format"
refs = ["REQ-core-[vars-globals, settings], SPC-core-vars"]
text = '''
The load module **shall** encapsulate:
- resolving the *default* global variables using
the vars module
- following paths to artifact directories
- loading artifacts from files
- validating name-collisions
- validating attribute types
- loading settings correctly

The load module **shall not** deal with:
- validating `partof` or `loc` links
- resolving user-set global variables
'''

[SPC-core-load]
refs = ["SPC-core-load-scope"]
partof = "REQ-purpose-format, REQ-core-load"

[SPC-core-load-error]
text = '''
Any error during loading **shall** result in a LoadError with
a useful description
'''

[SPC-core-load-error-file]
partof = "REQ-core-error-wait"
[SPC-core-load-error-file-1]
loc = "{core}/load.rs"
[SPC-core-load-error-file-2]
loc = "{core}/load.rs"
[SPC-core-load-error-file-3]
loc = "{core}/load.rs"
[SPC-core-load-error-file-return]
loc = "{core}/load.rs"

[SPC-core-load-error-vars]
partof = "REQ-core-error-wait"
[SPC-core-load-error-vars-1]
loc = "{core}/vars.rs"
[SPC-core-load-error-vars-return-1]
loc = "{core}/vars.rs"
[SPC-core-load-error-vars-3]
loc = "{core}/vars.rs"
[SPC-core-load-error-vars-return-2]
loc = "{core}/vars.rs"
text = '''
This uses an even better format, as it simply prints all invalid errors at the end
'''

[SPC-core-load-error-text]
partof = "REQ-core-error-wait"
[SPC-core-load-error-text-1]
loc = "{core}/vars.rs"
[SPC-core-load-error-text-2]
loc = "{core}/vars.rs"
[SPC-core-load-error-text-3]
loc = "{core}/vars.rs"
[SPC-core-load-error-text-return]
loc = "{core}/vars.rs"

##################################################
# Risks related to loading in general
[RSK-core-load-stable]
partof = "REQ-purpose-format, REQ-purpose-versioning"
text = '''
weight = 25

The **toml** library used is currently not stable. To prevent user impact
to changes in the toml library (or at least able to inform users of breaking
changes), extensive unit testsing must be in place that checks for
breaking changes.

the stability of the format is a **critical** component as it could directly
impact users. There is a **low** likelyhood that this issue will be an **avalanche**
'''

[RSK-core-load-invalid]
partof = "REQ-purpose-format"
text = '''
weight = 20

Type checking and validity, and failing on invalid data is essential
for the functionality of rsk and the reporting of errors to the user.

loading is a **critical** component. There is a **low** likelyhood that
this issue will be a **boulder**
'''

[RSK-core-load-infinite_loop]
text = '''
# weight = 15

loading is a **critical** component. Without proper care and testing, there is a
**low** likelyhood that requirements could try to load infinitely causing a
**rock** of a problem.

There are several safeguards:
- directories that are loaded are stored. If loading is attempted again,
    they will not be loaded.
- testing can create situations that may cause recursive loads and validate that they
    don't.
- recusrive directory loads should always execute completely before the next path
    is processed
'''

##################################################
# toml spec
[SPC-core-load-toml]
loc = "{src}/main.rs"
partof = "REQ-core-load"
text = '''
The rust library "toml-rs"
shall be used to load raw toml files
'''
[TST-core-load-toml]
partof = "SPC-core-load-toml"
loc = "{docs}/external.md"
text = '''
the toml-rs library has extensive unit tests to ensure
it is valid
'''

##################################################
# loading parts
[SPC-core-load-parts]
partof = "REQ-core-load-items, SPC-core-load-scope"
text = '''
This details the high level loading proceedure of rsk

The loading of the project files shall occur in 5 stages:
 1. loading and validation of raw data from all settings.paths recursively
 2. load and validate variables
 3. resolving of variables in text fields
 4. auto-creation of missing prefix artifacts
 5. linking of artifacts (parts, partof)

The only locations where critical failure is possible are in steps 1 and 2.

Critical failure shall occur if:
- invalid toml
- artifact errors (invalid name, extra attr, invalid attr type, etc)
- invalid partof string (artifact names)
- invalid path

Failures in further steps will simply cause warnings and will display on the
ui as missing links or None completion (etc)
'''

[SPC-core-load-parts-1]
loc = "{core}/load.rs"
text = '''
Loading and basic validation of raw text **shall** be accomplished mostly by
the type implementations themselves in a `from*` method.

settings.paths shall be resolved after a directory is fully loaded, as
the repos won't be known until then.

each directory that is loaded will store the directory path on a
HashMap<Path, Path> where the key is the cwd and the value is
the calculated repo

If a directory already exists in this Map, it will not be loaded.
(it has already been loaded)
'''

[SPC-core-load-settings-from_table]
loc = "{core}/load.rs"
text = '''
Settings **shall** have a `from_table` method to load them directly from a toml
Table. This will only load the raw settings, returning an Err on an invalid type.
'''

[SPC-core-load-settings-resolve]
loc = "{core}/vars.rs"
partof = "SPC-core-load-parts-1"
text = '''
Settings are resolved only after a recursive directory tree has been loaded.
This is to allow `repo_names` to resolve before the `repo` variable is applied
to `settings.paths`

Because settings must be handled before variables are resolved,
the only variables allowed are `repo` and `cwd`. However,
these variables must be resolved at the same time that
settings is resolved.
'''

[TST-core-load-settings]
partof = "SPC-core-load-settings-[from_table, resolve]"
loc = "{core}/tests/test_load.rs"

[SPC-core-load-vars]
loc = "{core}/load.rs"
partof = "SPC-core-load-parts-1"
text = '''
variables shall be applied in three parts:
- default globals (cwd and repo)
- resolve all other variables after entire project load
'''

##################################################
# load paths-file function
[SPC-core-load-paths]
loc = "{core}/load.rs"
partof = "SPC-core-load-parts-1"
text = '''
There **shall** be a function which can read a list of paths from a file
and load them recursively **or** can just load a directory path.
'''

[TST-core-load-path]
loc = "{core}/tests/test_load.rs"
partof = "SPC-core-load-paths, RSK-core-load-infinite_loop"
text = '''
have a paths-file and unreachable .rsk files. Have the file point to the unreachable
.rsk file's directory and validate that they are loaded correctly.

Also have the file point **back** to the original file, to test for infinite loop
'''

##################################################
# load dir function
[SPC-core-load-dir]
partof = "REQ-core-load-recursive, SPC-core-load-parts-1"
loc = "{core}/load.rs"
text = '''
There **shall** be a function which can load all artifacts from a
directory recursively (as defined in LOC-core-load-recursive)
'''

[TST-core-load]
partof = "RSK-core-load-stable"
text = "tests related to ensuring that loading toml works as expected"

[TST-core-load-dir-unit]
partof = "SPC-core-load-dir"
[TST-core-load-dir-unit-1]
loc = "{core}/tests/test_load.rs"
text = '''
load a folder with a [file folder[file]] and make sure all values
are present
'''
[TST-core-load-dir-unit-2]
loc = "{core}/tests/test_load.rs"
partof = "RSK-core-load-invalid"
text = "load a [file] with an invalid attribute an make sure it errors"
[TST-core-load-dir-unit-3]
loc = "{core}/tests/test_load.rs"
text = "load two files with the same key and make sure it errors"
[TST-core-load-dir-unit-4]
loc = "{core}/tests/test_load.rs"
text = '''
load a structure like so:
```
/foo/foo.rsk
/foo/bar/baz/unreachable.rsk
```
and make sure that `unreachable.rsk` does **not** get loaded
'''
[TST-core-load-dir-unit-5]
loc = "{core}/tests/test_load.rs"
text = '''
load a structure like so:
```
/foo/foo.rsk
/foo/bar/bar.rsk
/foo/bar/baz/baz.rsk
```
and make sure that all three rsk files are loaded
'''

##################################################
# load file function
[SPC-core-load-file]
loc = "{core}/load.rs"
partof = "SPC-core-load-parts-1"
text = '''
There **shall** be a function which can load all artifacts from a
file given a path
'''

[TST-core-load-valid]
loc = "{core}/tests/test_load.rs"
partof = '''
SPC-core-load-file, RSK-core-load-invalid,
SPC-core-artifact-[name-[check, struct], struct, types, types-check]
'''
text = "load a valid toml file and verify it's artifacts and settings"

[TST-core-load-invalid]
loc = "{core}/tests/test_load.rs"
partof = "SPC-core-load-[file, error], RSK-core-load-invalid"
text = '''
load separate toml files suffering the issues listed below and ensure
they do not load.

- trying to input a json-like table `{{}}`
- trying to have multiple types in an array `[1, "hello", 3]`
- name collisions at the [] level
- name collisions at the base level
'''

##################################################
# load table function
[SPC-core-load-table]
partof = "SPC-core-load-parts-1"
loc = "{core}/load.rs"
text = '''
There **shall** be a function which loads artifacts from a toml Table
'''

[TST-core-load-table-check]
partof = "SPC-core-load-table, RSK-core-load-invalid"
loc = "{core}/load.rs"
text = '''
The rust langauge **will** guarantee that every return value / error is addressed.

The loading algorithm **shall** perform tests for every eventuality and explitly
address them, returning Err immediately on any value that is the incorrect type.
'''

##################################################
# load attrs function
[TST-core-load-attrs-unit]
partof = "SPC-core-load-table, RSK-core-load, SPC-core-artifact-attrs"
text = '''
There **will** be extensive unit tests on the attrs loading mechanism to ensure
the type is loaded with proper type checking
'''
[TST-core-load-attrs-unit-1-a]
loc = "{core}//tests/test_load.rs"
[TST-core-load-attrs-unit-1-b]
loc = "{core}//tests/test_load.rs"
[TST-core-load-attrs-unit-2]
loc = "{core}/tests/test_load.rs"
[TST-core-load-attrs-unit-3]
loc = "{core}/tests/test_load.rs"

[SPC-core-load-loc-text]
loc = "{core}/vars.rs"
partof = "SPC-core-artifact-attrs-loc"
text = '''
there **shall** be a function that searches through text
and finds the relevant artifact names with their
positions, such that it can be stored by the artifact.loc
attr
'''
[TST-core-load-loc-text]
loc = "{core}/tests/test_vars.rs"
partof = "SPC-core-load-loc-text"

[SPC-core-load-loc-resolve]
loc = "{core}/vars.rs"
text = '''
there **shall** be a function that resolves the loc
attrs for all artifacts and prints out warnings
for locations that can't be resolved
'''
[TST-core-load-loc-resolve]
loc = "{core}/tests/test_core.rs"
partof = "SPC-core-load-loc-resolve"
