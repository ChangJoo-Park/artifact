
[defaults]
test = true

[local]
req = "REQ-format"

["{req}-file"]
text = '''
requirements **shall** be stored in the toml format defined at
https://github.com/toml-lang/toml
'''

["{req}-structure"]
text = '''
The structure of the requirements format **shall** follow this specification
'''
test = false

["{req}-structure-special"]
text = "special items in the document"

["{req}-structure-special-defaults"]
text = '''
There **shall** be an optional item with key 'defaults' that specifies defaults for
all artifact items.

The artifact items within the document **shall** addopt these defaults
if they are not specified.
'''

["{req}-structure-special-local"]
text = '''
There **shall** be an optional item with key "local" that can be accessed by
any text block in the document using the "{}" brackets within any string (including keys)

'localvars' **shall** override any defined global vars defined in {req}-structure-globalvars
'''

["{req}-structure-special-global"]
text = '''
There **shall** be an optional item with key 'global' that can be accessed by
any text block in the project using the "{}" brackets within any string (including keys)

The parser **shall** throw a useful exception upon finding global vars that overlap,
detailing in which files both definitions occur
 - **should** detail the line numbers as well

> global vars are used primarily for setting directory paths for source code
'''

["{req}-structure-artifacts"]
text = '''
All items in the document with keys not defined in {req}-structure-special
**shall** be interpretted as artifacts with a structure defined in this spec.
'''
link = "{req}-structure-special"

["{req}-structure-artifacts-text"]
text = "the text field"

["{req}-structure-artifacts-text-1"]
text = '''
The `text` field **shall** specify the text associated with the artifact
'''

["{req}-structure-artifacts-text-2"]
text = '''
The `text` field **shall** be interpreted in the
[markdown](https://en.wikipedia.org/wiki/Markdown) format when converted into
readable text.
'''

["{req}-structure-artifacts-extra"]
["{req}-structure-artifacts-extra-1"]
text = '''
The `extra` field **shall** specify extra text associated with the artifact

default = ERROR if not present
'''

["{req}-structure-artifacts-extra-2"]
text = '''
The `extra` field **shall** be interpreted in the
[markdown](https://en.wikipedia.org/wiki/Markdown) format when converted into
readable text and **should** be made into a collapsable box when possible.
'''

["{req}-structure-artifacts-active"]
text = '''
The `active` field **shall** be a boolean value. If false, the item
**shall** be ignored.

default = True

> Note: this is generally used to write down requirements before they
> have been approved
'''

["{req}-structure-artifacts-test"]
text = '''
The `test` field **shall** be a boolean value. If false, the item
**shall** be ignored for test coverage analysis.

default = True
'''
link = "REQ-coverage-test"

["{req}-structure-artifacts-link"]
text = '''The `link` field must follow this spec'''

["{req}-structure-artifacts-link-format"]
text = '''
The link field **shall** follow the following spec for specifying multiple artifacts
- `[]` **will** denote a set of artifacts related to the prevoius characters
- `,` **will** denote separate requirements
- `:` **will** denote a range of inclusive values (numerical or alphabetic)
'''
link = "REQ-coverage-implementation"
extra = '''
# Example:
Both of these are the same set of artifacts:
- `foo-[a:c, e], bar-d[1,2,3]`
- `foo-a, foo-b, foo-c, foo-e, bar-d1, bar-d2, bar-d3`
'''

["{req}-structure-artifacts-link-prefix"]
text = '''
- All artifacts with the same root-prefix **shall** be automatically linked
    to the root prefix artifact.
- If a root prefix artifact does not exist, it **shall** automatically be created
    empty

> definition: root-prefix=set of characters in groups between "-" character
> Example: foo-bar-baz-1 has root prefixes:
>    "foo", "foo-bar", "foo-bar-baz" and "foo-bar-baz-1"
'''
link = "REQ-coverage-implementation"
extra = '''
Example:
- REQ-foo
- REQ-foo-1
- REQ-foo-1-a
- REQ-foo-baz

Dependencies are:
- REQ-foo depends on REQ-foo-1 and REQ-foo-baz
- REQ-foo-1 depends on REQ-foo-1-a

Or in a graph:
```
 REQ-foo-1-a ==> REQ-foo-1 ==|
                             +=> REQ-foo
               REQ-foo-baz ==|
```
'''

["{req}-structure-artifacts-link-1"]
text = '''
The `link` field **shall** be a string detailing the artifacts linked to
(are dependent on) this artifact.
'''

["{req}-structure-artifacts-link-2"]
text = '''
The `link` field **shall** be used in test coverage percentage analysis
'''
link = "REQ-coverage-test"

["{req}-structure-artifacts-link-3"]
text = '''
The `link` field **shall** be used in implementation percentage analysis
'''
link = "REQ-coverage-implementation"

["{req}-structure-artifacts-loc-1"]
text = '''
The `loc` field **shall** be a string detailing the location of code
this artifact is dependent on for implementation
'''

["{req}-structure-artifacts-loc-1"]
text = '''
The `loc` field **shall** be of the format PATH:LOC-artifact
'''
link = "REQ-coverage-implementation"
