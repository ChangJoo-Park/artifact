[REQ-load]
partof = "REQ-2-load"
text = '''
The load module **shall** encapsulate:
  1. following paths to artifact directories
  2. loading artifacts from files
  3. validating name-collisions
  4. validating attribute types
  5. loading settings correctly
  6. loading the raw variables
  7. resolving variables
  8. creating missing parents
  9. auto-linking artifacts
 10. final artifact linking
 11. analyzing completeness
'''

[SPC-load]
text = '''
This details the high level loading proceedure of rsk and what
should be executed in parallel streams

The loading of the project files shall occur in 4 stages:
 1. loading and validation of raw data from all settings.artifact_paths recursively

In parallel:
 2. thread A (IO bound)
    a. find locations
 3. thread B (CPU bound)
    a. resolve variables
    b. create parents
    c. link parents
    d. validate partof
    e. link parts
    f. set completed and tested

Merge threads then:
 4. attach locations

> Some of Thread B could be further parallized with a lock on Artifacts
> (it has to be mutated by most of those steps)

# Error Scenarios
The only locations where critical failure (i.e. failure that causes `ls` to not work)
is possible is in step 1

Critical failure shall occur if:
- invalid toml
- artifact errors (invalid name, extra attr, invalid attr type, etc)
- invalid partof string (artifact names)
- invalid artifact_path

Failures in further steps will simply cause warnings and will display on the
ui as missing links or None completion (etc)
'''
[TST-load]
[TST-load-simple]
text = '''
Create a simple project that has a few ins and outs
 - has multi-level values
 - has folder that is unreachable unless you set an extra path (which is set)
 - has recursive setting of paths (encouraging double-eval)
 - make sure to use variables and default variables extensively

Litter this with artifacts at each level, some of which are implemented in a fake src/ dir
Validate that everything is as it should be
'''

[SPC-load-dir]
text = '''
The first necessary component is a function that can load the raw data from
all files in a directory recursively. For each dir this should:

 1. record itself in the `loaded_dirs` variable, to ensure dirs don't get double loaded
 2. parse any .rsk text files and store any directories
 3. recursively load all of the sub-directories that are not in `loaded_dirs`
 4. return all parsed (but not-processed) artifacts, settings and variables
'''

[SPC-load-raw]
text = '''
The raw-loading of paths will be done using the functions defined in:
 - SPC-load-dir
 - SPC-settings-load

It is a pretty simple design: directories are loaded and settings are resolved until
settings.artifact_paths is exhausted
'''

[TST-load-dir]
partof = "SPC-load-raw"
[TST-load-dir-valid]
text = '''
load the following and make sure values are present and correct:
 1. [file folder[file]]
 2. Unreachable should NOT get loaded:
 ```
 /foo/foo.rsk
 /foo/bar/baz/unreachable.rsk
 ```
'''
 3. All three files should be loaded:
```
/foo/foo.rsk
/foo/bar/bar.rsk
/foo/bar/baz/baz.rsk
```
[TST-load-dir-invalid]
text = '''
load the following and make sure it results in an error:
 1. `[file]` with an invalid attribute
 2. two files with same key
'''

[TST-load-toml-invalid]
partof = "RSK-2-load-toml"
text = '''
load separate toml files suffering the issues listed below and ensure
they do not load.

 1. trying to input a json-like table `{{}}`
 2. trying to have multiple types in an array `[1, "hello", 3]`
 3. name collisions at the [] level
 4. name collisions at the base level
'''

[TST-disabled-1]
text = "validate that settings.disabled=True causes toml to not get loaded"

[TST-load-loop]
partof = "RSK-2-load-loop"
text = '''
have a paths-file and unreachable .rsk files. Have the file point to the unreachable
.rsk file's directory and validate that they are loaded correctly.

Also have the file point **back** to the original file, to test for infinite loop
'''
