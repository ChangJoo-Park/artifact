[SPC-web]
text = '''
There were two possible options when considering user functionality.
Because the "Local Server App" is more inline with artifact's requirements
and workflow, it is the direction we are going.

# Traditional Web Edit App
The traditional approach would be to create a credential-based multi-user 
tool allowing a whole organiztion to edit the requirements in parallel 
from a single instance. The tool would probably use a database backend
and have to integrate directly into revision control in order to specify
which user edited a certain requirement, etc.

The workflow would be:
 - admin clones the requirements repo and creates a new branch
 - admin starts the server
 - entire organization can then edit requirements directly
 - admin has to periodically: 
    - (probably) stop the server
    - apply changes to files
    - merge with the master branch
    - make sure the merges 
    - (probably) start the server

## Advantages
The traditional web-ui is more familiar and may be what a team or
organization is expecting

## Disadvantages
Although it seems simpler at first (mostly because it is known), it is NOT
simple to integrate it with the text-based nature of artifact that expects
revision control be be completely handled by the user (an advantage of being
text based).

artifact is intended to allow separate teams to work on their own subset of
requirements and only merge with the larger org when they are done. This is
almost impossible with a traditional web-server approach.

# Local Server App
The local server approach would be to make it ultra-simple to run
the web-ui using the cmdline tool and all edits would be made directly to the
local files. As a result, edits might be slow -- but since only small teams
would be working on their branch's server, speed is not critical.

In this approach authentication is not necessary (although can possibly
be added).

The general workflow will be:
- developer creates a new branch in their revision control to edit
    requirements
- developer starts server with `art server IP_ADDR`
- developer and team make edits to the requirements via the web
- changes are reflected directly in the text
- developer makes commits (via cmdline) when needed
- when team is done, developer commits local changes and submits code review
- team and larger org review the code review using the same tools and process
    they normally use for reviewing code. 
- When done, code gets merged in.

## Advantages
- more inline with artifact's workflow
- simpler for any developer to run
- easier to merge changes (changes reflected directly in text)

## Disadvantages
- lower performance
- might not work the way some newcomers expect
'''

[SPC-web-view]
text = '''
The web interface **shall** be composed of three views:
 1. **folder view** allowing viewing the folder-layout of the requirements
      and drag/drop their location
 2. **list view** read-only collapsable-detail list with a search bar, giving 
      the user a more detailed overview of the requirements in a folder or in 
      general
 3. **edit view** for a single requirement, allowing the user to edit all 
      aspects of the artifact that can be edited

In addition, there shall always be a refresh button and navigation header.
'''

[TST-web]
text = '''
web tests are split into unit tests and e2e tests
'''

[TST-web-selenium]
text = '''
TODO: create selenium tests
'''

[TST-web-unit]
text = '''
- test json input/output
- test validation of
    - names
    - partof
# TODO: more tests
'''
