[REQ-cmd]
partof = "REQ-2-[ui, ui-[cmd, help]]"
text = '''
The rst cmdline interface will provide submodules to meet the requirements
defined in REQ-2-ui such as:

 - init: initialize the current repository
 - tutorial: begin an interactive tutorial for the user
 - ls: show artifacts and their fields
 - check: check the project for errors
 - fmt: format the *.toml files to be correct.
'''

[REQ-init]
text = '''
`rst init` is the primary first command that will be run by the user when they
want to create a rst project. It will initialize a `.rst` folder in the cwd
(giving an error if the cwd is already initialized) and will give the user basic
instructions on how to create requirements and where to get more information.
'''

[REQ-tutorial]
partof = "REQ-[2-ui-tutorial, cmd]"
text = '''
There **shall** be a tutorial that helps the user learn about rst.

The tutorial should be interactive and guide the user first through the basics of rst
and then through recording the requirements and design specifications of a simple
project.
'''

[SPC-fmt]
partof = "REQ-cmd"
text = '''
`rst fmt` will be the command that is run to format all files in a project
to their correct value. This tool **will** be modeled after gofmt's args:

```
-d  Do not print reformatted sources to standard output.    
    If a file's formatting is different than rstfmt's, print diffs 
    to standard output.

-l  Do not print reformatted sources to standard output.
    If a file's formatting is different from rstfmt's, print its name   
    to standard output.

-w  Do not print reformatted sources to standard output.    
    If a file's formatting is different from rstfmt's, overwrite it with 
    rstfmt's version.

```

The diffing functionality will be supported by the crate `difference`
'''

[SPC-init]

[SPC-tutorial]
text = '''
Key points that should be hit during the tutorial are:
- how to use `rst` and the `ls` cmd
- basics of setting the paths to load docs
- creating requirements
- creating specifications
- creating tests
- auto-linking of req <- spc <- of similar names
- manual linking of different names
- format for linking multiple items
- debugging when links are invalid
- marking items as done
- marking items as tested
- overview of error messages and error formats
- final words
'''

[TST-fmt]
partof = "RSK-security"
text = '''
There shall be extensive testing around the fmt cmd to cover multiple
points of risk:

- the command itself shall "check before writing"
- tests shall apply the changes and then check that data was not lost. 
    If data was lost, it will tell the user
- the command will be frequently used on the requirements for rst,
    which should help detect failures of the tool
'''

[TST-tutorial-line]
partof = "SPC-tutorial"
text = '''
all lines in the tutorial **shall** be tested to be 80 characters or less.
This will make the tutorial uniform and easier to read.
'''
